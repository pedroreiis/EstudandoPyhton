'''ExercÃ­cio 3: Construtor

Crie uma classe Pessoa que receba nome e idade no construtor (__init__)
E um mÃ©todo que diga se a pessoa Ã© maior de idade ou nÃ£o.'''

class Pessoa():
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade
    
    def verificar_idade(self):
        if self.idade >= 18:
            print(f'{self.nome} Ã© maior de idade.')
        else:
            print(f'{self.nome} Ã© menor de idade.')

pessoa1 = Pessoa('Pedro', 23)
pessoa1.verificar_idade()
pessoa2 = Pessoa('Lucas', 6)
pessoa2.verificar_idade()
pessoa3 = Pessoa('Maria', 19)
pessoa3.verificar_idade()

'''ExplicaÃ§Ã£o:
DefiniÃ§Ã£o da classe
class Pessoa:


Criamos a classe Pessoa.

Essa classe Ã© o molde para criar vÃ¡rias pessoas (objetos).

2. O construtor __init__
def __init__(self, nome, idade):
    self.nome = nome
    self.idade = idade


__init__ Ã© chamado quando criamos uma nova pessoa.

nome e idade sÃ£o recebidos como parÃ¢metros.

self.nome = nome â†’ guarda o nome dentro do objeto.

self.idade = idade â†’ guarda a idade dentro do objeto.

Exemplo:

p1 = Pessoa("Ana", 17)


Aqui: self.nome = "Ana" e self.idade = 17.

3. MÃ©todo verificar_idade
def verificar_idade(self):
    if self.idade >= 18:
        print(f"{self.nome} Ã© maior de idade.")
    else:
        print(f"{self.nome} Ã© menor de idade.")


Esse mÃ©todo pega a idade da pessoa (self.idade).

Se for 18 ou mais, imprime que Ã© maior de idade.

Caso contrÃ¡rio, diz que Ã© menor de idade.

4. Criando objetos
p1 = Pessoa("Ana", 17)
p2 = Pessoa("Carlos", 21)


Criamos duas pessoas diferentes:

p1 â†’ nome: "Ana", idade: 17

p2 â†’ nome: "Carlos", idade: 21

5. Chamando o mÃ©todo
p1.verificar_idade()  # "Ana Ã© menor de idade."
p2.verificar_idade()  # "Carlos Ã© maior de idade."


Cada objeto usa suas prÃ³prias informaÃ§Ãµes.

ðŸ‘‰ Resumindo:

Classe = molde da pessoa

Atributos = nome e idade

MÃ©todo = verificar se Ã© maior ou menor de idade

Objetos = cada pessoa criada com a classe'''
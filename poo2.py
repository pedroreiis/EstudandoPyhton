'''Exerc√≠cio 2: M√©todos Simples

Crie uma classe ContaBancaria com:

Atributo saldo

M√©todos depositar(valor) e sacar(valor)

Um m√©todo exibir_saldo()
RESPOSTA: '''
class ContaBancaria:
    def __init__(self, saldo=0):
        self.saldo = saldo

    def depositar(self, valor):
        self.saldo += valor
        print(f"‚úÖ Dep√≥sito de R${valor} realizado com sucesso.")

    def sacar(self, valor):
        if valor <= self.saldo:
            self.saldo -= valor
            print(f"‚úÖ Saque de R${valor} realizado com sucesso.")
        else:
            print("‚ùå Saldo insuficiente!")

    def exibir_saldo(self):
        print(f"üí∞ Saldo atual: R${self.saldo}")


# Programa principal
conta = ContaBancaria()

while True:
    print("\n--- Menu ---")
    print("1 - Depositar")
    print("2 - Sacar")
    print("3 - Ver saldo")
    print("4 - Sair")

    opcao = input("Escolha uma op√ß√£o: ")

    if opcao == "1":
        valor = float(input("Digite o valor para depositar: R$"))
        conta.depositar(valor)
    elif opcao == "2":
        valor = float(input("Digite o valor para sacar: R$"))
        conta.sacar(valor)
    elif opcao == "3":
        conta.exibir_saldo()
    elif opcao == "4":
        print("‚úÖ Encerrando o programa...")
        break
    else:
        print("‚ùå Op√ß√£o inv√°lida, tente novamente.")

'''Explica√ß√£o:
1. Criando a classe
class ContaBancaria:
    def __init__(self, saldo=0):
        self.saldo = saldo


Criamos uma classe chamada ContaBancaria.

O __init__ √© o construtor, ou seja, o que acontece quando criamos uma conta nova.

O par√¢metro saldo=0 significa que, se voc√™ n√£o passar nada, a conta come√ßa com saldo zero.

Exemplo:

conta = ContaBancaria()       # come√ßa com saldo 0
conta2 = ContaBancaria(100)   # come√ßa com saldo 100

2. M√©todos da conta
def depositar(self, valor):
    self.saldo += valor
    print(f"‚úÖ Dep√≥sito de R${valor} realizado com sucesso.")


Esse m√©todo soma o valor ao saldo.

self.saldo += valor ‚Üí √© o mesmo que self.saldo = self.saldo + valor.

def sacar(self, valor):
    if valor <= self.saldo:
        self.saldo -= valor
        print(f"‚úÖ Saque de R${valor} realizado com sucesso.")
    else:
        print("‚ùå Saldo insuficiente!")


Aqui verificamos se tem dinheiro suficiente antes de sacar.

Se tiver, o saldo diminui.

Se n√£o tiver, mostra a mensagem de erro.

def exibir_saldo(self):
    print(f"üí∞ Saldo atual: R${self.saldo}")


S√≥ mostra o saldo atual formatado.

3. Programa principal (menu interativo)
while True:
    print("\n--- Menu ---")
    print("1 - Depositar")
    print("2 - Sacar")
    print("3 - Ver saldo")
    print("4 - Sair")


Criamos um loop infinito (while True), ou seja, o programa fica rodando at√© voc√™ mandar parar.

O menu mostra as op√ß√µes.

opcao = input("Escolha uma op√ß√£o: ")


Aqui o usu√°rio digita a op√ß√£o.

Dependendo do valor, vai para o if/elif.

4. As escolhas

Se escolher 1, pede um valor e chama depositar.

Se escolher 2, pede um valor e chama sacar.

Se escolher 3, chama exibir_saldo.

Se escolher 4, d√° break ‚Üí sai do loop e encerra.

Se digitar algo inv√°lido, aparece a mensagem de erro.

üëâ Resumindo:

A classe ContaBancaria √© o modelo da conta (atributos + m√©todos).

O while True √© o caixa eletr√¥nico rodando, recebendo comandos do usu√°rio.'''